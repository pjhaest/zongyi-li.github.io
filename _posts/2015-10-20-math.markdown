---
layout: post
title: Graph Kernel Network for PDEs
date: 2020-03-24 11:59:00-0400
description: Use graph networks to learn the kernel and solve partial differential equations
---
>The blog takes about 10 minutes to read.
It introduces our recent work that uses graph neural networks to learn 
**mappings between function spaces** and solve partial differential equations. 
You can also check out the [paper](https://arxiv.org/abs/2003.03485).
Background of graph neural networks (GNN) and partial differential equations (PDE) is preferred.

### Introduction

A wide range of important engineering and physical problems are governed by 
[PDEs](https://en.wikipedia.org/wiki/Partial_differential_equation). 
Over the past few decades, significant progress has been made on formulating 
and solving  the governing PDEs in many scientific fields 
from micro-scale problems (e.g., quantum and molecular dynamics) to 
macro-scale applications (e.g., civil and marine engineering). 

Despite the success in the application of PDEs to solve real-life problems, 
two significant challenges remain. 
- First, identifying/formulating the underlying PDEs appropriate for 
the modeling of a specific problem usually requires extensive prior knowledge 
in the corresponding field, which is then combined with universal conservation laws 
to design a predictive model; 
for example, modeling the deformation and fracture of solid structures 
requires detailed knowledge on the relationship between stress and strain in the constituent material. 
For complicated systems such as living cells, 
acquiring such knowledge is often elusive 
and formulating the governing PDE for these systems remains prohibitive; 
the possibility of learning such knowledge from data may revolutionize such fields. 
- Second, solving complicated non-linear PDE systems 
(such as those arising in turbulence and plasticity) is computationally demanding; 
again the possibility of using instances of data from such computations 
to design fast approximate solvers holds great potential. 

In both these challenges, if neural networks are to play a role in exploiting 
the increasing volume of available data, 
then there is a need to formulate them so that they are well-adapted 
to mappings from function space to function space.

### Fixed discretization is both good and bad.

PDEs are, unfortunately, hard. 
In general we cannot hope to find an analytic solutions to PDEs. 
Hundred years of effort has been made to develop numerical solvers 
such as finite element method and finite difference method.

<div class="img_row">
    <img height="200px" width="700px" class="col three" src="{{ site.baseurl }}/assets/img/grids.png" alt="" title="Discretizations"/>
</div>
<div class="col three caption">
Three examples of discretization. 
The left one is a regular grid used in finite difference method;
the middle one is a trianglized grid used in finite element method;
the right one is a cylinder mesh for real-world airfoil problem.
</div>

Just like how we store images by pixels in *.PNG* and *.JPG* formats, 
we need to discretize the domain of PDEs into some grid and solve the equation on the grid.
It really makes the thing easier.

Nevertheless, there are several drawbacks of discretization:
- The error scales steeply with the resolution. 
We need a high resolution to get good approximations.
- The computation and storage also steeply scale with the resolution (i.e. the size of the grid).
- When the equation is solved on one discretization, 
we cannot change the discretization anymore. 

*.PNG* and *.JPG* formats are good. 
But some time maybe we want to save the images as vector images in *.EPS* or *.SVG* formats,
so that it can be used and displayed in any context. 
And for some images, vector image format is more convenient and efficient.
Similarly we want to find the continuous version for PDEs, an operator that is invariant of discretization.  

Furthermore, mathematically speaking, such continuous, 
discretization-invariant format is in some sense, closer to the real, analytic solution. 
It has an important mathematical meaning. 
Bear the motivation in mind. Let's develop the rigorous formulation.

### Problem Setting

Consider the standard second order elliptic PDE

\begin{align}
\begin{split}
- \nabla \cdot (a(x) \nabla u(x))  &= f(x), \quad  x \in D \\
u(x) &= 0, \qquad \:\: x \in \partial D
\end{split}
\end{align}

$$ - \nabla \cdot (a(x) \nabla u(x))  = f(x), \quad  x \in D $$
$$ u(x) &= 0, \qquad \:\: x \in \partial D $$

for some bounded, open set $$D \subset \R^d$$ and a fixed function
{\(f \in L^2(D;\R)\)}. This equation is prototypical of PDEs arising in
numerous applications including hydrology \cite{bear2012fundamentals} and elasticity \cite{antman2005problems}. 
For a given  \(a \in \A = L^\infty(D;\R^+) \cap L^2(D;\R^+)\), equation (\ref{eq:ellptic}) has 
a unique weak solution \(u \in \U = H_0^1(D;\R)\) \cite{Evans} 
and therefore we can define the solution operator \(\Ftrue\)
as the map \(a \mapsto u\). Note that while the PDE (\ref{eq:ellptic})
is linear, the solution operator  $\Ftrue$ is not.



